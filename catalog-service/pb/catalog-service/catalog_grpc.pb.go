// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: catalog.proto

package catalogservice

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CatalogService_CreateRestaurant_FullMethodName           = "/catalogservice.CatalogService/CreateRestaurant"
	CatalogService_GetRestaurantById_FullMethodName          = "/catalogservice.CatalogService/GetRestaurantById"
	CatalogService_GetRestaurantsByName_FullMethodName       = "/catalogservice.CatalogService/GetRestaurantsByName"
	CatalogService_GetRestaurants_FullMethodName             = "/catalogservice.CatalogService/GetRestaurants"
	CatalogService_CreateMenuItem_FullMethodName             = "/catalogservice.CatalogService/CreateMenuItem"
	CatalogService_GetMenuItemById_FullMethodName            = "/catalogservice.CatalogService/GetMenuItemById"
	CatalogService_GetMenuItemsByRestaurantId_FullMethodName = "/catalogservice.CatalogService/GetMenuItemsByRestaurantId"
)

// CatalogServiceClient is the client API for CatalogService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CatalogServiceClient interface {
	CreateRestaurant(ctx context.Context, in *CreateRestaurantRequest, opts ...grpc.CallOption) (*Restaurant, error)
	GetRestaurantById(ctx context.Context, in *GetRestaurantRequest, opts ...grpc.CallOption) (*Restaurant, error)
	GetRestaurantsByName(ctx context.Context, in *GetRestaurantsByNameRequest, opts ...grpc.CallOption) (*GetRestaurantsResponse, error)
	GetRestaurants(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetRestaurantsResponse, error)
	CreateMenuItem(ctx context.Context, in *CreateMenuItemRequest, opts ...grpc.CallOption) (*MenuItem, error)
	GetMenuItemById(ctx context.Context, in *GetMenuItemRequest, opts ...grpc.CallOption) (*MenuItem, error)
	GetMenuItemsByRestaurantId(ctx context.Context, in *GetMenuItemsByRestaurantIdRequest, opts ...grpc.CallOption) (*GetMenuItemsResponse, error)
}

type catalogServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCatalogServiceClient(cc grpc.ClientConnInterface) CatalogServiceClient {
	return &catalogServiceClient{cc}
}

func (c *catalogServiceClient) CreateRestaurant(ctx context.Context, in *CreateRestaurantRequest, opts ...grpc.CallOption) (*Restaurant, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Restaurant)
	err := c.cc.Invoke(ctx, CatalogService_CreateRestaurant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogServiceClient) GetRestaurantById(ctx context.Context, in *GetRestaurantRequest, opts ...grpc.CallOption) (*Restaurant, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Restaurant)
	err := c.cc.Invoke(ctx, CatalogService_GetRestaurantById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogServiceClient) GetRestaurantsByName(ctx context.Context, in *GetRestaurantsByNameRequest, opts ...grpc.CallOption) (*GetRestaurantsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRestaurantsResponse)
	err := c.cc.Invoke(ctx, CatalogService_GetRestaurantsByName_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogServiceClient) GetRestaurants(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetRestaurantsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRestaurantsResponse)
	err := c.cc.Invoke(ctx, CatalogService_GetRestaurants_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogServiceClient) CreateMenuItem(ctx context.Context, in *CreateMenuItemRequest, opts ...grpc.CallOption) (*MenuItem, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MenuItem)
	err := c.cc.Invoke(ctx, CatalogService_CreateMenuItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogServiceClient) GetMenuItemById(ctx context.Context, in *GetMenuItemRequest, opts ...grpc.CallOption) (*MenuItem, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MenuItem)
	err := c.cc.Invoke(ctx, CatalogService_GetMenuItemById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogServiceClient) GetMenuItemsByRestaurantId(ctx context.Context, in *GetMenuItemsByRestaurantIdRequest, opts ...grpc.CallOption) (*GetMenuItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMenuItemsResponse)
	err := c.cc.Invoke(ctx, CatalogService_GetMenuItemsByRestaurantId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CatalogServiceServer is the server API for CatalogService service.
// All implementations must embed UnimplementedCatalogServiceServer
// for forward compatibility.
type CatalogServiceServer interface {
	CreateRestaurant(context.Context, *CreateRestaurantRequest) (*Restaurant, error)
	GetRestaurantById(context.Context, *GetRestaurantRequest) (*Restaurant, error)
	GetRestaurantsByName(context.Context, *GetRestaurantsByNameRequest) (*GetRestaurantsResponse, error)
	GetRestaurants(context.Context, *emptypb.Empty) (*GetRestaurantsResponse, error)
	CreateMenuItem(context.Context, *CreateMenuItemRequest) (*MenuItem, error)
	GetMenuItemById(context.Context, *GetMenuItemRequest) (*MenuItem, error)
	GetMenuItemsByRestaurantId(context.Context, *GetMenuItemsByRestaurantIdRequest) (*GetMenuItemsResponse, error)
	mustEmbedUnimplementedCatalogServiceServer()
}

// UnimplementedCatalogServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCatalogServiceServer struct{}

func (UnimplementedCatalogServiceServer) CreateRestaurant(context.Context, *CreateRestaurantRequest) (*Restaurant, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRestaurant not implemented")
}
func (UnimplementedCatalogServiceServer) GetRestaurantById(context.Context, *GetRestaurantRequest) (*Restaurant, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRestaurantById not implemented")
}
func (UnimplementedCatalogServiceServer) GetRestaurantsByName(context.Context, *GetRestaurantsByNameRequest) (*GetRestaurantsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRestaurantsByName not implemented")
}
func (UnimplementedCatalogServiceServer) GetRestaurants(context.Context, *emptypb.Empty) (*GetRestaurantsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRestaurants not implemented")
}
func (UnimplementedCatalogServiceServer) CreateMenuItem(context.Context, *CreateMenuItemRequest) (*MenuItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMenuItem not implemented")
}
func (UnimplementedCatalogServiceServer) GetMenuItemById(context.Context, *GetMenuItemRequest) (*MenuItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMenuItemById not implemented")
}
func (UnimplementedCatalogServiceServer) GetMenuItemsByRestaurantId(context.Context, *GetMenuItemsByRestaurantIdRequest) (*GetMenuItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMenuItemsByRestaurantId not implemented")
}
func (UnimplementedCatalogServiceServer) mustEmbedUnimplementedCatalogServiceServer() {}
func (UnimplementedCatalogServiceServer) testEmbeddedByValue()                        {}

// UnsafeCatalogServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CatalogServiceServer will
// result in compilation errors.
type UnsafeCatalogServiceServer interface {
	mustEmbedUnimplementedCatalogServiceServer()
}

func RegisterCatalogServiceServer(s grpc.ServiceRegistrar, srv CatalogServiceServer) {
	// If the following call pancis, it indicates UnimplementedCatalogServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CatalogService_ServiceDesc, srv)
}

func _CatalogService_CreateRestaurant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRestaurantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).CreateRestaurant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CatalogService_CreateRestaurant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).CreateRestaurant(ctx, req.(*CreateRestaurantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogService_GetRestaurantById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRestaurantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).GetRestaurantById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CatalogService_GetRestaurantById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).GetRestaurantById(ctx, req.(*GetRestaurantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogService_GetRestaurantsByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRestaurantsByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).GetRestaurantsByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CatalogService_GetRestaurantsByName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).GetRestaurantsByName(ctx, req.(*GetRestaurantsByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogService_GetRestaurants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).GetRestaurants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CatalogService_GetRestaurants_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).GetRestaurants(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogService_CreateMenuItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMenuItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).CreateMenuItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CatalogService_CreateMenuItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).CreateMenuItem(ctx, req.(*CreateMenuItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogService_GetMenuItemById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMenuItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).GetMenuItemById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CatalogService_GetMenuItemById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).GetMenuItemById(ctx, req.(*GetMenuItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogService_GetMenuItemsByRestaurantId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMenuItemsByRestaurantIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).GetMenuItemsByRestaurantId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CatalogService_GetMenuItemsByRestaurantId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).GetMenuItemsByRestaurantId(ctx, req.(*GetMenuItemsByRestaurantIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CatalogService_ServiceDesc is the grpc.ServiceDesc for CatalogService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CatalogService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "catalogservice.CatalogService",
	HandlerType: (*CatalogServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRestaurant",
			Handler:    _CatalogService_CreateRestaurant_Handler,
		},
		{
			MethodName: "GetRestaurantById",
			Handler:    _CatalogService_GetRestaurantById_Handler,
		},
		{
			MethodName: "GetRestaurantsByName",
			Handler:    _CatalogService_GetRestaurantsByName_Handler,
		},
		{
			MethodName: "GetRestaurants",
			Handler:    _CatalogService_GetRestaurants_Handler,
		},
		{
			MethodName: "CreateMenuItem",
			Handler:    _CatalogService_CreateMenuItem_Handler,
		},
		{
			MethodName: "GetMenuItemById",
			Handler:    _CatalogService_GetMenuItemById_Handler,
		},
		{
			MethodName: "GetMenuItemsByRestaurantId",
			Handler:    _CatalogService_GetMenuItemsByRestaurantId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "catalog.proto",
}
